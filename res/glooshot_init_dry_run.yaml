---
# Source: glooshot/charts/prometheus/templates/alertmanager-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-alertmanager
data:
  alertmanager.yml: |
    global: {}
    receivers:
    - name: default-receiver
    route:
      group_interval: 5m
      group_wait: 10s
      receiver: default-receiver
      repeat_interval: 3h
    
---
# Source: glooshot/charts/prometheus/templates/server-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    component: "server"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-server
data:
  alerts: |
    {}
    
  prometheus.yml: |
    global:
      evaluation_interval: 1m
      scrape_interval: 1m
      scrape_timeout: 10s
    rule_files:
    - /etc/config/rules
    - /etc/config/alerts
    scrape_configs:
    - job_name: prometheus
      static_configs:
      - targets:
        - localhost:9090
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-apiservers
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: default;kubernetes;https
        source_labels:
        - __meta_kubernetes_namespace
        - __meta_kubernetes_service_name
        - __meta_kubernetes_endpoint_port_name
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
      job_name: kubernetes-nodes-cadvisor
      kubernetes_sd_configs:
      - role: node
      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - replacement: kubernetes.default.svc:443
        target_label: __address__
      - regex: (.+)
        replacement: /api/v1/nodes/$1/proxy/metrics/cadvisor
        source_labels:
        - __meta_kubernetes_node_name
        target_label: __metrics_path__
      scheme: https
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        insecure_skip_verify: true
    - job_name: kubernetes-service-endpoints
      kubernetes_sd_configs:
      - role: endpoints
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scrape
      - action: replace
        regex: (https?)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_scheme
        target_label: __scheme__
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_service_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_node_name
        target_label: kubernetes_node
    - honor_labels: true
      job_name: prometheus-pushgateway
      kubernetes_sd_configs:
      - role: service
      relabel_configs:
      - action: keep
        regex: pushgateway
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
    - job_name: kubernetes-services
      kubernetes_sd_configs:
      - role: service
      metrics_path: /probe
      params:
        module:
        - http_2xx
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_service_annotation_prometheus_io_probe
      - source_labels:
        - __address__
        target_label: __param_target
      - replacement: blackbox
        target_label: __address__
      - source_labels:
        - __param_target
        target_label: instance
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - source_labels:
        - __meta_kubernetes_service_name
        target_label: kubernetes_name
    - job_name: kubernetes-pods
      kubernetes_sd_configs:
      - role: pod
      relabel_configs:
      - action: keep
        regex: true
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_scrape
      - action: replace
        regex: (.+)
        source_labels:
        - __meta_kubernetes_pod_annotation_prometheus_io_path
        target_label: __metrics_path__
      - action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        source_labels:
        - __address__
        - __meta_kubernetes_pod_annotation_prometheus_io_port
        target_label: __address__
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - action: replace
        source_labels:
        - __meta_kubernetes_namespace
        target_label: kubernetes_namespace
      - action: replace
        source_labels:
        - __meta_kubernetes_pod_name
        target_label: kubernetes_pod_name
    
    alerting:
      alertmanagers:
      - kubernetes_sd_configs:
          - role: pod
        tls_config:
          ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token
        relabel_configs:
        - source_labels: [__meta_kubernetes_namespace]
          regex: glooshot
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_app]
          regex: prometheus
          action: keep
        - source_labels: [__meta_kubernetes_pod_label_component]
          regex: alertmanager
          action: keep
        - source_labels: [__meta_kubernetes_pod_container_port_number]
          regex:
          action: drop
  rules: |
    {}
    
---
# Source: glooshot/charts/supergloo/templates/4-sidecar-injector-configmap.yaml

apiVersion: v1
kind: ConfigMap
metadata:
  name: sidecar-injection-resources
  namespace: glooshot
  labels:
    app: supergloo
    supergloo: sidecar-injection
data:
  secret.tpl: |-
    
    apiVersion: v1
    kind: Secret
    metadata:
      name: {{ .Name }}
      namespace: {{ .Namespace }}
      labels:
        app: sidecar-injector
    type: Opaque
    data:
      cert.pem: {{ .ServerCert }}
      key.pem: {{ .ServerCertKey }}
    
  deployment.tpl: |-
    
    apiVersion: extensions/v1beta1
    kind: Deployment
    metadata:
      name: {{ .Name }}
      namespace: {{ .Namespace }}
      labels:
        app: sidecar-injector
    spec:
      replicas: 1
      template:
        metadata:
          labels:
            app: sidecar-injector
        spec:
          serviceAccountName: supergloo
          containers:
            - name: sidecar-injector
              image: {{ .Image.Name }}:{{ .Image.Tag }}
              imagePullPolicy: {{ .Image.PullPolicy }}
              env:
                - name: TLS_CERT_PATH
                  value: "/etc/webhook/cert.pem"
                - name: TLS_KEY_PATH
                  value: "/etc/webhook/key.pem"
              volumeMounts:
                - name: webhook-certs
                  mountPath: /etc/webhook/
                  readOnly: true
          volumes:
            - name: webhook-certs
              secret:
                secretName: {{ .Name }}
    
  service.tpl: |-
    
    apiVersion: v1
    kind: Service
    metadata:
      name: {{ .Name }}
      namespace: {{ .Namespace }}
      labels:
        app: sidecar-injector
    spec:
      ports:
        - port: 443
          targetPort: 443
      selector:
        app: sidecar-injector
    
  config-map.tpl: |-
    
    apiVersion: v1
    kind: ConfigMap
    metadata:
      name: {{ .Name }}
      namespace: {{ .Namespace }}
      labels:
        app: sidecar-injector
    data:
      aws-app-mesh-patch.yaml: |
        {{`

        containers:
          - name: envoy
            image: 111345817488.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-envoy:v1.8.0.2-beta
            securityContext:
              runAsUser: 1337
            env:
              - name: "APPMESH_VIRTUAL_NODE_NAME"
                value: "mesh/{{- .MeshName -}}/virtualNode/{{- .VirtualNodeName -}}"
              - name: "ENVOY_LOG_LEVEL"
                value: "debug"
              - name: "AWS_REGION"
                value: "{{- .AwsRegion -}}"
        initContainers:
          - name: proxyinit
            image: 111345817488.dkr.ecr.us-west-2.amazonaws.com/aws-appmesh-proxy-route-manager:latest
            securityContext:
              capabilities:
                add:
                  - NET_ADMIN
            env:
              - name: "APPMESH_START_ENABLED"
                value: "1"
              - name: "APPMESH_IGNORE_UID"
                value: "1337"
              - name: "APPMESH_ENVOY_INGRESS_PORT"
                value: "15000"
              - name: "APPMESH_ENVOY_EGRESS_PORT"
                value: "15001"
              - name: "APPMESH_APP_PORTS"
                value: "{{- .AppPort -}}"
              - name: "APPMESH_EGRESS_IGNORED_IP"
                value: "169.254.169.254"

        `}}
    
  mutating-webhook-configuration.tpl: |-
    
    apiVersion: admissionregistration.k8s.io/v1beta1
    kind: MutatingWebhookConfiguration
    metadata:
      name: {{ .Name }}
      namespace: {{ .Namespace }}
      labels:
        app: sidecar-injector
    webhooks:
      - name: {{ .Name }}.{{ .Namespace }}.svc  # must be a domain with at least three segments separated by dots
        clientConfig:
          service:
            name: {{ .Name }}
            namespace: {{ .Namespace }}
            path: "/pods/inject-sidecar"
          caBundle: {{ .CaBundle }}
        rules:
          - operations: [ "CREATE" ]
            apiGroups: [""]
            apiVersions: ["v1"]
            resources: ["pods"]
    
---
# Source: glooshot/templates/configmap.yaml
# configmap
apiVersion: v1
kind: ConfigMap
metadata:
  name: glooshot-config
  namespace: glooshot
  labels:
    app: glooshot
data:
  refreshRate: 1s

---
# Source: glooshot/charts/prometheus/templates/alertmanager-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-alertmanager
spec:
  accessModes:
    - ReadWriteOnce
    
  resources:
    requests:
      storage: "2Gi"
---
# Source: glooshot/charts/prometheus/templates/server-pvc.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  labels:
    component: "server"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-server
spec:
  accessModes:
    - ReadWriteOnce
    
  resources:
    requests:
      storage: "8Gi"
---
# Source: glooshot/charts/prometheus/templates/alertmanager-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-alertmanager
---
# Source: glooshot/charts/prometheus/templates/kube-state-metrics-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-kube-state-metrics
---
# Source: glooshot/charts/prometheus/templates/pushgateway-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-pushgateway
---
# Source: glooshot/charts/prometheus/templates/server-serviceaccount.yaml

apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    component: "server"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-server

---
# Source: glooshot/charts/supergloo/templates/0-serviceaccounts.yaml
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: supergloo
  namespace: glooshot
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: discovery
  namespace: glooshot
---
kind: ServiceAccount
apiVersion: v1
metadata:
  name: mesh-discovery
  namespace: glooshot
---
# Source: glooshot/templates/serviceaccount.yaml


kind: ServiceAccount
apiVersion: v1
metadata:
  name: glooshot-serviceaccount
  namespace: glooshot
  labels:
    app: glooshot
    glooshot: rbac
---
# Source: glooshot/templates/crds.yaml

apiVersion: apiextensions.k8s.io/v1beta1
kind: CustomResourceDefinition
metadata:
  name: experiments.glooshot.solo.io
  annotations:
    "helm.sh/hook": crd-install
  labels:
    app: glooshot
spec:
  group: glooshot.solo.io
  names:
    kind: Experiment
    listKind: ExperimentList
    plural: experiments
    shortNames:
      - exp
  scope: Namespaced
  version: v1

---
# Source: glooshot/charts/prometheus/templates/kube-state-metrics-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-kube-state-metrics
rules:
  - apiGroups:
      - ""
    resources:
      - namespaces
      - nodes
      - persistentvolumeclaims
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - endpoints
      - secrets
      - configmaps
    verbs:
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - cronjobs
      - jobs
    verbs:
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - list
      - watch
  - apiGroups:
      - policy
    resources:
      - poddisruptionbudgets
    verbs:
      - list
      - watch

---
# Source: glooshot/charts/prometheus/templates/server-clusterrole.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  labels:
    component: "server"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-server
rules:
  - apiGroups:
      - ""
    resources:
      - nodes
      - nodes/proxy
      - services
      - endpoints
      - pods
      - ingresses
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - configmaps
    verbs:
      - get
  - apiGroups:
      - "extensions"
    resources:
      - ingresses/status
      - ingresses
    verbs:
      - get
      - list
      - watch
  - nonResourceURLs:
      - "/metrics"
    verbs:
      - get

---
# Source: glooshot/charts/supergloo/templates/1-clusterrole.yaml


---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: discovery
rules:
  - apiGroups: [""]
    resources: ["configmaps", "pods", "services", "secrets", "endpoints", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "create"]
  - apiGroups: ["gloo.solo.io"]
    resources: ["settings", "upstreams"]
    verbs: ["*"]
---
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: mesh-discovery
rules:
  - apiGroups: [""]
    resources: ["configmaps", "pods", "services", "secrets", "endpoints", "namespaces"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["authentication.istio.io"]
    resources: ["meshpolicies"]
    verbs: ["get", "list", "watch"]
  - apiGroups: ["apiextensions.k8s.io"]
    resources: ["customresourcedefinitions"]
    verbs: ["get", "create"]
  - apiGroups: ["supergloo.solo.io"]
    resources: ["*"]
    verbs: ["*"]
  - apiGroups: ["gloo.solo.io"]
    resources: ["settings", "upstreams"]
    verbs: ["*"]

---
# Source: glooshot/templates/clusterrole.yaml


kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: glooshot-clusterrole
    labels:
        app: glooshot
        glooshot: rbac
rules:
- apiGroups: ["glooshot.solo.io"]
  resources: ["experiments","reports"]
  verbs: ["*"]
- apiGroups: ["supergloo.solo.io"]
  resources: ["meshes"]
  verbs: ["get", "list"]
- apiGroups: ["supergloo.solo.io"]
  resources: ["routingrules"]
  verbs: ["*"]
---
# Source: glooshot/charts/prometheus/templates/kube-state-metrics-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: glooshot-prometheus-kube-state-metrics
    namespace: glooshot
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: glooshot-prometheus-kube-state-metrics
---
# Source: glooshot/charts/prometheus/templates/server-clusterrolebinding.yaml

apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  labels:
    component: "server"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-server
subjects:
  - kind: ServiceAccount
    name: glooshot-prometheus-server
    namespace: glooshot
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: glooshot-prometheus-server

---
# Source: glooshot/charts/supergloo/templates/2-clusterrole-binding.yaml
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: supergloo-role-binding
subjects:
- kind: ServiceAccount
  name: supergloo
  namespace: glooshot
roleRef:
  kind: ClusterRole
  name: cluster-admin
  apiGroup: rbac.authorization.k8s.io

---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: discovery-role-binding
subjects:
- kind: ServiceAccount
  name: discovery
  namespace: glooshot
roleRef:
  kind: ClusterRole
  name: discovery
  apiGroup: rbac.authorization.k8s.io
---
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: mesh-discovery-role-binding
subjects:
  - kind: ServiceAccount
    name: mesh-discovery
    namespace: glooshot
roleRef:
  kind: ClusterRole
  name: mesh-discovery
  apiGroup: rbac.authorization.k8s.io

---
# Source: glooshot/templates/clusterrolebinding.yaml


kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: glooshot-clusterrole-binding
  labels:
    app: glooshot
    glooshot: rbac
subjects:
- kind: ServiceAccount
  name: glooshot-serviceaccount
  namespace: glooshot
roleRef:
  kind: ClusterRole
  name: glooshot-clusterrole
  apiGroup: rbac.authorization.k8s.io
---
# Source: glooshot/templates/role.yaml


kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
    name: glooshot-role
    namespace: glooshot
    labels:
        app: glooshot
        glooshot: rbac
rules:
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "create"]
- apiGroups: ["glooshot.solo.io"]
  resources: ["experiments","reports"]
  verbs: ["*"]
---
# Source: glooshot/templates/rolebinding.yaml


kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: glooshot-role-binding
  namespace: glooshot
  labels:
    app: glooshot
    glooshot: rbac
subjects:
- kind: ServiceAccount
  name: glooshot-serviceaccount
  namespace: glooshot
roleRef:
  kind: Role
  name: glooshot-role
  apiGroup: rbac.authorization.k8s.io
---
# Source: glooshot/charts/prometheus/templates/alertmanager-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-alertmanager
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9093
  selector:
    component: "alertmanager"
    app: prometheus
    release: glooshot
  type: "ClusterIP"

---
# Source: glooshot/charts/prometheus/templates/kube-state-metrics-svc.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/scrape: "true"
    
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-kube-state-metrics
spec:
  clusterIP: None
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 8080
  selector:
    component: "kube-state-metrics"
    app: prometheus
    release: glooshot
  type: "ClusterIP"

---
# Source: glooshot/charts/prometheus/templates/pushgateway-service.yaml
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/probe: pushgateway
    
  labels:
    component: "pushgateway"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-pushgateway
spec:
  ports:
    - name: http
      port: 9091
      protocol: TCP
      targetPort: 9091
  selector:
    component: "pushgateway"
    app: prometheus
    release: glooshot
  type: "ClusterIP"

---
# Source: glooshot/charts/prometheus/templates/server-service.yaml
apiVersion: v1
kind: Service
metadata:
  labels:
    component: "server"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-server
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 9090
  selector:
    component: "server"
    app: prometheus
    release: glooshot
  type: "ClusterIP"

---
# Source: glooshot/charts/prometheus/templates/alertmanager-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    component: "alertmanager"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-alertmanager
spec:
  selector:
    matchLabels:
      component: "alertmanager"
      app: prometheus
      release: glooshot
  replicas: 1
  template:
    metadata:
      labels:
        component: "alertmanager"
        app: prometheus
        release: glooshot
        chart: prometheus-8.4.1
        heritage: Tiller
    spec:
      serviceAccountName: glooshot-prometheus-alertmanager
      containers:
        - name: prometheus-alertmanager
          image: "prom/alertmanager:v0.15.3"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: status.podIP
          args:
            - --config.file=/etc/config/alertmanager.yml
            - --storage.path=/data
            - --cluster.advertise-address=$(POD_IP):6783
            - --web.external-url=/

          ports:
            - containerPort: 9093
          readinessProbe:
            httpGet:
              path: /#/status
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: "/data"
              subPath: ""

        - name: prometheus-alertmanager-configmap-reload
          image: "jimmidyson/configmap-reload:v0.2.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://localhost:9093/-/reload
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true
      volumes:
        - name: config-volume
          configMap:
            name: glooshot-prometheus-alertmanager
        - name: storage-volume
          persistentVolumeClaim:
            claimName: glooshot-prometheus-alertmanager

---
# Source: glooshot/charts/prometheus/templates/kube-state-metrics-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    component: "kube-state-metrics"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-kube-state-metrics
spec:
  selector:
    matchLabels:
      component: "kube-state-metrics"
      app: prometheus
      release: glooshot
  replicas: 1
  template:
    metadata:
      labels:
        component: "kube-state-metrics"
        app: prometheus
        release: glooshot
        chart: prometheus-8.4.1
        heritage: Tiller
    spec:
      serviceAccountName: glooshot-prometheus-kube-state-metrics
      containers:
        - name: prometheus-kube-state-metrics
          image: "quay.io/coreos/kube-state-metrics:v1.4.0"
          imagePullPolicy: "IfNotPresent"
          ports:
            - name: metrics
              containerPort: 8080
          resources:
            {}
            

---
# Source: glooshot/charts/prometheus/templates/pushgateway-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    component: "pushgateway"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-pushgateway
spec:
  selector:
    matchLabels:
      component: "pushgateway"
      app: prometheus
      release: glooshot
  replicas: 1
  template:
    metadata:
      labels:
        component: "pushgateway"
        app: prometheus
        release: glooshot
        chart: prometheus-8.4.1
        heritage: Tiller
    spec:
      serviceAccountName: glooshot-prometheus-pushgateway
      containers:
        - name: prometheus-pushgateway
          image: "prom/pushgateway:v0.6.0"
          imagePullPolicy: "IfNotPresent"
          args:
          ports:
            - containerPort: 9091
          readinessProbe:
            httpGet:
              path: /#/status
              port: 9091
            initialDelaySeconds: 10
            timeoutSeconds: 10
          resources:
            {}
            

---
# Source: glooshot/charts/prometheus/templates/server-deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    component: "server"
    app: prometheus
    release: glooshot
    chart: prometheus-8.4.1
    heritage: Tiller
  name: glooshot-prometheus-server
spec:
  selector:
    matchLabels:
      component: "server"
      app: prometheus
      release: glooshot
  replicas: 1
  template:
    metadata:
      labels:
        component: "server"
        app: prometheus
        release: glooshot
        chart: prometheus-8.4.1
        heritage: Tiller
    spec:
      serviceAccountName: glooshot-prometheus-server
      initContainers:
      - name: "init-chown-data"
        image: "busybox:latest"
        imagePullPolicy: "IfNotPresent"
        resources:
            {}
            
        # 65534 is the nobody user that prometheus uses.
        command: ["chown", "-R", "65534:65534", "/data"]
        volumeMounts:
        - name: storage-volume
          mountPath: /data
          subPath: ""
      containers:
        - name: prometheus-server-configmap-reload
          image: "jimmidyson/configmap-reload:v0.2.2"
          imagePullPolicy: "IfNotPresent"
          args:
            - --volume-dir=/etc/config
            - --webhook-url=http://127.0.0.1:9090/-/reload
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
              readOnly: true

        - name: prometheus-server
          image: "prom/prometheus:v2.6.0"
          imagePullPolicy: "IfNotPresent"
          args:
            - --config.file=/etc/config/prometheus.yml
            - --storage.tsdb.path=/data
            - --web.console.libraries=/etc/prometheus/console_libraries
            - --web.console.templates=/etc/prometheus/consoles
            - --web.enable-lifecycle
          ports:
            - containerPort: 9090
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9090
            initialDelaySeconds: 30
            timeoutSeconds: 30
          resources:
            {}
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config
            - name: storage-volume
              mountPath: /data
              subPath: ""
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: glooshot-prometheus-server
        - name: storage-volume
          persistentVolumeClaim:
            claimName: glooshot-prometheus-server
---
# Source: glooshot/charts/supergloo/templates/3-deployment.yaml
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: supergloo
  namespace: glooshot
spec:
  replicas: 1
  selector:
    matchLabels:
      supergloo: supergloo
  template:
    metadata:
      labels:
        supergloo: supergloo
        app: supergloo
    spec:
      serviceAccountName: supergloo
      containers:
        - image: "quay.io/solo-io/supergloo:0.3.18"
          imagePullPolicy:  Always
          name: supergloo
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: START_STATS_SERVER
              value: "true"

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: supergloo
    supergloo: discovery
  name: discovery
  namespace: glooshot
spec:
  replicas: 1
  selector:
    matchLabels:
      supergloo: discovery
  template:
    metadata:
      labels:
        supergloo: discovery
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "9091"
        prometheus.io/scrape: "true"
    spec:
      serviceAccountName: discovery
      containers:
        - image: "quay.io/solo-io/discovery:0.13.21"
          imagePullPolicy: Always
          name: discovery
          env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: START_STATS_SERVER
            value: "true"

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mesh-discovery
  namespace: glooshot
spec:
  replicas: 1
  selector:
    matchLabels:
      supergloo: supergloo
  template:
    metadata:
      labels:
        supergloo: supergloo
        app: supergloo
    spec:
      serviceAccountName: mesh-discovery
      containers:
        - image: "quay.io/solo-io/mesh-discovery:0.3.18"
          imagePullPolicy:  Always
          name: mesh-discovery
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: START_STATS_SERVER
              value: "true"

---
---
# Source: glooshot/templates/deployment.yaml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: glooshot
  name: glooshot
#  namespace: glooshot # use -n for now
spec:
  replicas: 1
  selector:
    matchLabels:
      app: glooshot
  template:
    metadata:
      labels:
        app: glooshot
        glooshot: glooshot-op
    spec:
      initContainers:
        - name: await-prometheus
          image: busybox:1.30.1
          command: ['sh', '-c', 'until wget http://glooshot-prometheus-server/ -O /dev/null; do echo waiting for prometheus; sleep 1; done;']
      serviceAccountName: glooshot-serviceaccount
      containers:
      - image: "quay.io/solo-io/glooshot-op:tute2e7"
        imagePullPolicy: Always
        name: glooshot
        env:
          - name: PROMETHEUS_URL
            value: http://glooshot-prometheus-server/
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
      imagePullSecrets:
      - name: solo-io-docker-secret

